year<-2014
library(stringr)
library(tidyverse)
year<-2014
library(stringr)
library(tidyverse)
NCAAPredictions<-predict(logitModel,testDataEX,type="response")
library(stringr)
install.packages("tidyverse")
library(tidyverse)
library(magrittr)
library(dplyr)
# load data need data files Seeds, Results, Conferences, and Coaches
seeds <- read.csv("data/NCAATourneySeeds.csv")
library(stringr)
install.packages("tidyverse")
library(tidyverse)
library(magrittr)
library(dplyr)
# load data need data files Seeds, Results, Conferences, and Coaches
seeds <- read.csv("data/NCAATourneySeeds.csv")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
#Events <- read.csv("data/Events_2014.csv", header = TRUE)
CompactResults <- read.csv("data/RegularSeasonCompactResults.csv", header = TRUE)
DetailedResults <- read.csv("data/RegularSeasonDetailedResults.csv", header = TRUE)
#head(Events)
head(CompactResults)
head(DetailedResults)
DetailedResults2014 <- DetailedResults[DetailedResults$Season == "2014",]
head(DetailedResults)
#find list of all teams during that season
teams <- data.frame(DetailedResults2014[unique(DetailedResults2014$WTeamID, incomparables = FALSE), 3])
#preview data
head(teams)
#count number of teams
nrow(teams)
numTeams <- nrow(teams)
for (i in 1:numTeams){
detailedResultsW <- DetailedResults2014[DetailedResults2014$WTeamID == teams[i,], c(1,2,3,4,8,9,10,11,12,13,14,15,16,17,18,19,20,21) ]
detailedResultsL <- DetailedResults2014[DetailedResults2014$LTeamID == teams[i,], c(1,2,5,6,8,22,23,24,25,26,27,28,29,30,31,32,33,34) ]
colnames(detailedResultsW) <- c("Season", "DayNum", "TeamID", "Score", "OT", "FGM", "FGA","FGM3", "FGA3", "FTM", "FTA", "OR", "DR", "AST", "TO", "STL", "BLK", "PF")
colnames(detailedResultsL) <- c("Season", "DayNum", "TeamID", "Score", "OT", "FGM", "FGA","FGM3", "FGA3", "FTM", "FTA", "OR", "DR", "AST", "TO", "STL", "BLK", "PF")
detailedBind <- rbind(detailedResultsW, detailedResultsL)
SeasonAverageTemp <- colMeans(detailedBind[c(1,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18)])
if (i == 1){
seasonAverage <- as.data.frame(t(SeasonAverageTemp))
} else{
seasonAverage <- rbind(seasonAverage, as.data.frame(t(SeasonAverageTemp)) )
}
}
print(seasonAverage)
write.csv(seasonAverage, file = "../2014-teams-season-average.csv", row.names = FALSE)
year<-2014
year<-2014
library(stringr)
library(tidyverse)
library(magrittr)
library(dplyr)
# load data need data files Seeds, Results, Conferences, and Coaches
seeds <- read.csv("../data/NCAATourneySeeds.csv")
library(stringr)
library(tidyverse)
library(magrittr)
library(dplyr)
# load data need data files Seeds, Results, Conferences, and Coaches
seeds <- read.csv("../data/NCAATourneySeeds.csv")
year<-2014
library(stringr)
library(tidyverse)
library(magrittr)
library(dplyr)
# load data need data files Seeds, Results, Conferences, and Coaches
seeds <- read.csv("../data/NCAATourneySeeds.csv")
results <- read.csv("../data/RegularSeasonCompactResults.csv")
results<-subset(results,Season<year)
testData<-read.csv("../data/SampleSubmissionStage1.csv")
View(results)
View(results)
View(seeds)
View(seeds)
View(testData)
View(testData)
# Remove characters from seed so integer remains
seeds$Seed <- as.integer(str_extract_all(seeds$Seed, "[0-9]+"))
seedsEX<-seeds
head(seeds) # check to make sure regional characters are removed
# Keep only the needed files from the results; Season, WTeamID, and LTeamID
resultsEX<-results
resultsEX %<>% select(Season, WTeamID, LTeamID)
# Rearrange data so it matches submission file
resultsEX %<>% mutate(team_id_diff = WTeamID - LTeamID,
Team1 = case_when(team_id_diff < 0 ~ WTeamID,
team_id_diff > 0 ~ LTeamID),
Team2 = case_when(team_id_diff > 0 ~ WTeamID,
team_id_diff < 0 ~ LTeamID),
result = if_else(WTeamID == Team1, 1, 0))
resultsEX %>% filter((Team1 - Team2) > 0)
#Note on the above, if winner ID is greater than loser ID then Team 1 is loser. If loser ID is greater than winner, then Team 1 is the winner. Opposite for Team 2. This approximates random / uniform distribution.
# Remove WTeamID, LTeamID, and team_id_diff
resultsEX %<>% select(1,5:7)
resultsEX
team1_seeds <- seeds %>% set_colnames(c("Season", "T1Seed", "Team1ID"))
team2_seeds <- seeds %>% set_colnames(c("Season", "T2Seed", "Team2ID"))
# Join seeds to training set
resultsEX %<>% left_join(., team1_seeds, by = c("Season", "Team1"="Team1ID"))
resultsEX %<>% left_join(., team2_seeds, by = c("Season", "Team2"="Team2ID"))
# Create relative round indicator
resultsEX %<>% mutate(team1_seed_str = if_else(T1Seed < 9, 1,0),
team2_seed_str = if_else(T2Seed < 9, 1,0))
head(resultsEX)
# Create variable seed_diff
resultsEX %<>% mutate(seed_diff = T1Seed - T2Seed)
year<-2014
library(stringr)
library(tidyverse)
library(magrittr)
library(dplyr)
# load data need data files Seeds, Results, Conferences, and Coaches
seeds <- read.csv("../data/NCAATourneySeeds.csv")
results <- read.csv("../data/RegularSeasonCompactResults.csv")
results<-subset(results,Season<year)
testData<-read.csv("../data/SampleSubmissionStage1.csv")
# Remove characters from seed so integer remains
seeds$Seed <- as.integer(str_extract_all(seeds$Seed, "[0-9]+"))
seedsEX<-seeds
head(seeds) # check to make sure regional characters are removed
# Keep only the needed files from the results; Season, WTeamID, and LTeamID
resultsEX<-results
resultsEX %<>% select(Season, WTeamID, LTeamID)
# Rearrange data so it matches submission file
resultsEX %<>% mutate(team_id_diff = WTeamID - LTeamID,
Team1 = case_when(team_id_diff < 0 ~ WTeamID,
team_id_diff > 0 ~ LTeamID),
Team2 = case_when(team_id_diff > 0 ~ WTeamID,
team_id_diff < 0 ~ LTeamID),
result = if_else(WTeamID == Team1, 1, 0))
resultsEX %>% filter((Team1 - Team2) > 0)
#Note on the above, if winner ID is greater than loser ID then Team 1 is loser. If loser ID is greater than winner, then Team 1 is the winner. Opposite for Team 2. This approximates random / uniform distribution.
# Remove WTeamID, LTeamID, and team_id_diff
resultsEX %<>% select(1,5:7)
resultsEX
team1_seeds <- seeds %>% set_colnames(c("Season", "T1Seed", "Team1ID"))
team2_seeds <- seeds %>% set_colnames(c("Season", "T2Seed", "Team2ID"))
# Join seeds to training set
resultsEX %<>% left_join(., team1_seeds, by = c("Season", "Team1"="Team1ID"))
resultsEX %<>% left_join(., team2_seeds, by = c("Season", "Team2"="Team2ID"))
# Create relative round indicator
resultsEX %<>% mutate(team1_seed_str = if_else(T1Seed < 9, 1,0),
team2_seed_str = if_else(T2Seed < 9, 1,0))
head(resultsEX)
# Create variable seed_diff
resultsEX %<>% mutate(seed_diff = T1Seed - T2Seed)
testDataEX<-testData
testDataEX %<>% select(ID) %>% separate(ID, sep = "_", into = c("Season", "Team1", "Team2"), convert = TRUE)
head(testDataEX)
team1_seeds2 <- seeds %>% set_colnames(c("Season", "T1Seed", "Team1ID"))
team2_seeds2 <- seeds %>% set_colnames(c("Season", "T2Seed", "Team2ID"))
testDataEX %<>% left_join(., team1_seeds2, by = c("Season", "Team1"="Team1ID"))
testDataEX %<>% left_join(., team2_seeds2, by = c("Season", "Team2"="Team2ID"))
head(testDataEX)
testDataEX %<>% mutate(team1_seed_str = if_else(T1Seed < 9, 1,0),
team2_seed_str = if_else(T2Seed < 9, 1,0),
seed_diff = T1Seed - T2Seed)
head(testDataEX)
logitModel<-glm(result~seed_diff+team1_seed_str+team2_seed_str,data=resultsEX,family=binomial(link="logit"))
summary(logitModel)
NCAAPredictions<-predict(logitModel,testDataEX,type="response")
head(testDataEX)
outputFrame<-testDataEX[0]
outputFrame$ID<-paste(testDataEX$Season,testDataEX$Team1,testDataEX$Team2,sep ="_")
outputFrame$Pred<-NCAAPredictions
head(outputFrame)
write.csv(outputFrame,"testOutput.csv")
